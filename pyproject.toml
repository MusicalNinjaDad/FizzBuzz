[build-system]
requires = ["setuptools", "setuptools-rust"]
build-backend = "setuptools.build_meta"

[project]
name = "fizzbuzz"
description = "An implementation of the traditional fizzbuzz kata"
# readme = "README.md"
license = {text = "MIT"}
authors = [{name = "Mike Foster"}]
dynamic = ["version"]
requires-python = ">=3.8"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Intended Audience :: Developers",
    "Natural Language :: English",
]

[project.urls]
# Homepage = "https://github.com/MusicalNinjaDad/recurtools"
# Documentation = "https://musicalninjadad.github.io/recurtools/"
Repository = "https://github.com/MusicalNinjaDad/fizzbuzz"
Issues = "https://github.com/MusicalNinjaDad/fizzbuzz/issues"
# Changelog = "https://github.com/MusicalNinjaDad/recurtools/blob/main/CHANGELOG.md"

[tool.setuptools.dynamic]
version = {file = "__pyversion__"}

[tool.setuptools.packages.find]
where = ["fizzbuzzpy"]

[[tool.setuptools-rust.ext-modules]]
# Private Rust extension module to be nested into the Python package
target = "fizzbuzzo3"  # The last part of the name (e.g. "_lib") has to match lib.name in Cargo.toml,
                             # but you can add a prefix to nest it inside of a Python package.
path = "fizzbuzzo3/Cargo.toml"      # Default value, can be omitted
binding = "PyO3"         # Default value, can be omitted

[project.optional-dependencies]
dev = [
    "black",
    "pytest",
    "pytest-doctest-mkdocstrings",
    "ruff",
    ]

[tool.pytest.ini_options]
xfail_strict=true
addopts = [
    "--doctest-modules",
    "--doctest-mdcodeblocks",
    "--doctest-glob='*.md'",
]
norecursedirs = [
    "pyo3", # by adding pyo3 we also need to specify all standard exclusions ...
    "*.egg",
    ".*",
    "_darcs",
    "build",
    "CVS",
    "dist",
    "node_modules",
    "venv",
    "{arch}",
]

[tool.coverage.run]
branch=true
omit=["test_*"]
dynamic_context = "test_function"

[tool.ruff]
line-length = 120
format.skip-magic-trailing-comma = false
format.quote-style = "double"

[tool.ruff.lint]
select = ["ALL"]
flake8-pytest-style.fixture-parentheses = false
flake8-annotations.mypy-init-return = true
extend-ignore = [
    "E701", # One-line ifs are not great, one-liners with suppression are worse
    "ANN101", # Type annotation for `self`
    "ANN202", # Return type annotation for private functions
    "ANN401", # Using Any often enough that supressing individually is pointless
    "W291", # Double space at EOL is linebreak in md-docstring
    "W292", # Too much typing to add newline at end of each file
    "W293", # Whitespace only lines are OK for us
    "D401", # First line of docstring should be in imperative mood ("Returns ..." is OK, for example)
    "D203", # 1 blank line required before class docstring (No thank you, only after the class docstring)
    "D212", # Multi-line docstring summary should start at the first line (We start on new line, D209)
    "D215", # Section underline is over-indented (No underlines)
    "D400", # First line should end with a period (We allow any punctuation, D415)
    "D406", # Section name should end with a newline (We use a colon, D416)
    "D407", # Missing dashed underline after section (No underlines)
    "D408", # Section underline should be in the line following the section's name (No underlines)
    "D409", # Section underline should match the length of its name (No underlines)
    "D413", # Missing blank line after last section (Not required)
    ]

[tool.ruff.lint.per-file-ignores]
# Additional ignores for tests 
"**/test_*.py" = [
    "INP001", # Missing __init__.py
    "ANN", # Missing type annotations
    "S101", # Use of `assert`
    "PLR2004", # Magic number comparisons are OK in tests
    "D1", # Don't REQUIRE docstrings for tests - but they are nice
    ]

"**/__init__.py" = [
    "D104", # Don't require module docstring in __init__.py
    "F401", # Unused imports are fine: using __init__.py to expose them with implicit __ALL__ 
]